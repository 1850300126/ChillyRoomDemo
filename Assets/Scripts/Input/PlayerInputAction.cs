//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Input/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""aed8f59f-b58d-435d-a245-2c4b8fe578db"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a2ad0e07-8e87-4a33-bc52-1ed13d7f0e48"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b7d31924-f4ee-4375-b8b6-1bef362be148"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""5b0da99b-ff26-44ff-ad5d-380151c54c15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockDirection"",
                    ""type"": ""Button"",
                    ""id"": ""56a44d7b-ca4e-4393-9728-1f4454dc2efd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""403c6144-788d-4b1a-ba76-97b61d2bd6dc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e749dd02-ebc7-4675-992a-59dd0e50f3f3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0a1cbfaa-4dec-44c7-9e0d-8a3b7b5ade49"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ca3a4bd0-5040-4303-8a76-e505c56f7d47"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3514f266-75b2-434d-905c-8d76a7590a84"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""250b9c95-95b8-46f5-bd7f-bb78e1808042"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SwitchWeapon"",
            ""id"": ""816fb5cd-f04d-43eb-a4c4-f9959395c43f"",
            ""actions"": [
                {
                    ""name"": ""SwitchFirstWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""2c82f9b3-a7cd-4031-bb4f-d5ac8445553d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchSecondWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""aafceb3f-69fb-46c3-813a-6b3518781d20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchThirdWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""46499218-9432-4771-89d3-d1c5c2cd904c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6992aefd-77bd-4d72-b120-6e416ea964ab"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchFirstWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53cbc1fd-7b9b-459a-892e-10138dc10761"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchSecondWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7539cbf6-38d7-42f8-afb8-1d1367c28bda"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchThirdWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        m_Movement_Attack = m_Movement.FindAction("Attack", throwIfNotFound: true);
        m_Movement_LockDirection = m_Movement.FindAction("LockDirection", throwIfNotFound: true);
        // SwitchWeapon
        m_SwitchWeapon = asset.FindActionMap("SwitchWeapon", throwIfNotFound: true);
        m_SwitchWeapon_SwitchFirstWeapon = m_SwitchWeapon.FindAction("SwitchFirstWeapon", throwIfNotFound: true);
        m_SwitchWeapon_SwitchSecondWeapon = m_SwitchWeapon.FindAction("SwitchSecondWeapon", throwIfNotFound: true);
        m_SwitchWeapon_SwitchThirdWeapon = m_SwitchWeapon.FindAction("SwitchThirdWeapon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    private readonly InputAction m_Movement_Jump;
    private readonly InputAction m_Movement_Attack;
    private readonly InputAction m_Movement_LockDirection;
    public struct MovementActions
    {
        private @PlayerInputAction m_Wrapper;
        public MovementActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputAction @Attack => m_Wrapper.m_Movement_Attack;
        public InputAction @LockDirection => m_Wrapper.m_Movement_LockDirection;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @LockDirection.started += instance.OnLockDirection;
            @LockDirection.performed += instance.OnLockDirection;
            @LockDirection.canceled += instance.OnLockDirection;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @LockDirection.started -= instance.OnLockDirection;
            @LockDirection.performed -= instance.OnLockDirection;
            @LockDirection.canceled -= instance.OnLockDirection;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // SwitchWeapon
    private readonly InputActionMap m_SwitchWeapon;
    private List<ISwitchWeaponActions> m_SwitchWeaponActionsCallbackInterfaces = new List<ISwitchWeaponActions>();
    private readonly InputAction m_SwitchWeapon_SwitchFirstWeapon;
    private readonly InputAction m_SwitchWeapon_SwitchSecondWeapon;
    private readonly InputAction m_SwitchWeapon_SwitchThirdWeapon;
    public struct SwitchWeaponActions
    {
        private @PlayerInputAction m_Wrapper;
        public SwitchWeaponActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchFirstWeapon => m_Wrapper.m_SwitchWeapon_SwitchFirstWeapon;
        public InputAction @SwitchSecondWeapon => m_Wrapper.m_SwitchWeapon_SwitchSecondWeapon;
        public InputAction @SwitchThirdWeapon => m_Wrapper.m_SwitchWeapon_SwitchThirdWeapon;
        public InputActionMap Get() { return m_Wrapper.m_SwitchWeapon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwitchWeaponActions set) { return set.Get(); }
        public void AddCallbacks(ISwitchWeaponActions instance)
        {
            if (instance == null || m_Wrapper.m_SwitchWeaponActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwitchWeaponActionsCallbackInterfaces.Add(instance);
            @SwitchFirstWeapon.started += instance.OnSwitchFirstWeapon;
            @SwitchFirstWeapon.performed += instance.OnSwitchFirstWeapon;
            @SwitchFirstWeapon.canceled += instance.OnSwitchFirstWeapon;
            @SwitchSecondWeapon.started += instance.OnSwitchSecondWeapon;
            @SwitchSecondWeapon.performed += instance.OnSwitchSecondWeapon;
            @SwitchSecondWeapon.canceled += instance.OnSwitchSecondWeapon;
            @SwitchThirdWeapon.started += instance.OnSwitchThirdWeapon;
            @SwitchThirdWeapon.performed += instance.OnSwitchThirdWeapon;
            @SwitchThirdWeapon.canceled += instance.OnSwitchThirdWeapon;
        }

        private void UnregisterCallbacks(ISwitchWeaponActions instance)
        {
            @SwitchFirstWeapon.started -= instance.OnSwitchFirstWeapon;
            @SwitchFirstWeapon.performed -= instance.OnSwitchFirstWeapon;
            @SwitchFirstWeapon.canceled -= instance.OnSwitchFirstWeapon;
            @SwitchSecondWeapon.started -= instance.OnSwitchSecondWeapon;
            @SwitchSecondWeapon.performed -= instance.OnSwitchSecondWeapon;
            @SwitchSecondWeapon.canceled -= instance.OnSwitchSecondWeapon;
            @SwitchThirdWeapon.started -= instance.OnSwitchThirdWeapon;
            @SwitchThirdWeapon.performed -= instance.OnSwitchThirdWeapon;
            @SwitchThirdWeapon.canceled -= instance.OnSwitchThirdWeapon;
        }

        public void RemoveCallbacks(ISwitchWeaponActions instance)
        {
            if (m_Wrapper.m_SwitchWeaponActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwitchWeaponActions instance)
        {
            foreach (var item in m_Wrapper.m_SwitchWeaponActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwitchWeaponActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwitchWeaponActions @SwitchWeapon => new SwitchWeaponActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnLockDirection(InputAction.CallbackContext context);
    }
    public interface ISwitchWeaponActions
    {
        void OnSwitchFirstWeapon(InputAction.CallbackContext context);
        void OnSwitchSecondWeapon(InputAction.CallbackContext context);
        void OnSwitchThirdWeapon(InputAction.CallbackContext context);
    }
}
